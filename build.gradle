buildscript {
    ext.versions = [
            'enjinCommons'    : '0.3.0-SNAPSHOT',
            'gson'            : '2.8.5',
            'pusher'          : '1.8.0',
            'okhttp'          : '3.12.1',
            'retrofit'        : '2.5.0',
            'supportOptional' : '1.2',
            'lombok'          : '1.18.6',
            'junit'           : '4.12',
            'mockWebServer'   : '4.2.0',
            'truth'           : '1.0',
            'awaitility'      : '4.0.1',
            'toStringVerifier': '1.4.5',
            'equalsVerifier'  : '3.1.9',
            'mockito'         : '2.28.2',
            'powermock'       : '2.0.2'
    ]

    ext.deps = [
            'enjinCommons'            : "com.enjin:java_commons:${versions.enjinCommons}",
            'gson'                    : "com.google.code.gson:gson:${versions.gson}",
            'pusher'                  : "com.pusher:pusher-java-client:${versions.pusher}",
            'okhttp'                  : "com.squareup.okhttp3:okhttp:${versions.okhttp}",
            'okhttpLoggingInterceptor': "com.squareup.okhttp3:logging-interceptor:${versions.okhttp}",
            'okhttpUrlConnection'     : "com.squareup.okhttp3:okhttp-urlconnection:${versions.okhttp}",
            'retrofit'                : "com.squareup.retrofit2:retrofit:${versions.retrofit}",
            'retrofitGson'            : "com.squareup.retrofit2:converter-gson:${versions.retrofit}",
            'supportOptional'         : "com.github.dmstocking:support-optional:${versions.supportOptional}",
            'junit'                   : "junit:junit:${versions.junit}",
            'mockWebServer'           : "com.squareup.okhttp3:mockwebserver:${versions.mockWebServer}",
            'truth'                   : "com.google.truth:truth:${versions.truth}",
            'awaitility'              : "org.awaitility:awaitility:${versions.awaitility}",
            'toStringVerifier'        : "com.jparams:to-string-verifier:${versions.toStringVerifier}",
            'equalsVerifier'          : "nl.jqno.equalsverifier:equalsverifier:${versions.equalsVerifier}",
            'mockito'                 : "org.mockito:mockito-core:${versions.mockito}",
            'powermockJunit4'         : "org.powermock:powermock-module-junit4:${versions.powermock}",
            'powermockMockito2'       : "org.powermock:powermock-api-mockito2:${versions.powermock}"
    ]

    ext.local = new Properties()
    File file = project.rootProject.file('local.properties')
    if (file.exists()) local.load(file.newDataInputStream())

    repositories {
        mavenCentral()
        jcenter()
        gradlePluginPortal()
    }

    dependencies {
        classpath 'com.vanniktech:gradle-maven-publish-plugin:0.8.0'
        classpath 'org.ajoberstar:gradle-git-publish:2.1.1'
        classpath 'com.diffplug.spotless:spotless-plugin-gradle:3.24.3'
    }
}

plugins {
    id 'io.freefair.lombok' version '3.2.1'
    id 'com.github.johnrengelman.shadow' version '5.0.0'
    id 'com.bmuschko.nexus' version '2.3.1'
    id 'io.codearte.nexus-staging' version '0.20.0'
    id 'net.ltgt.errorprone' version '0.8.1'
    id 'jacoco'
    id 'org.sonarqube' version '2.7'
    id 'checkstyle'
}

sonarqube {
    properties {
        property 'sonar.sourceEncoding', 'UTF-8'
    }
}

allprojects {
    apply from: "${rootProject.rootDir}/gradle/spotless.gradle"

    group = GROUP
    version = VERSION_NAME

    repositories {
        jcenter()
        mavenCentral()
        maven {
            url 'https://oss.sonatype.org/content/groups/public/'
        }
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'java-library'
    apply plugin: 'maven'
    apply plugin: 'io.freefair.lombok'
    apply plugin: 'net.ltgt.errorprone'
    apply plugin: 'com.github.johnrengelman.shadow'
    apply plugin: 'jacoco'
    apply plugin: 'checkstyle'
    apply from: "${rootProject.rootDir}/gradle/deploy.gradle"

    sourceCompatibility = JavaVersion.VERSION_1_7
    targetCompatibility = JavaVersion.VERSION_1_7

    tasks.withType(JavaCompile).configureEach {
        options.errorprone {
            enabled = JavaVersion.current() < JavaVersion.VERSION_12
            disable('UnusedVariable')
        }
    }

    javadoc {
        dependsOn delombok
        source = delombok.target
        // exclude any implementation packages
        exclude '**/impl/**'
        // exclude any implementation classes
        exclude '**/*Impl.java'
    }

    artifacts {
        archives shadowJar
    }

    lombok {
        config['lombok.addLombokGeneratedAnnotation'] = 'false'
    }

    test {
        reports {
            html.enabled = false
        }
    }

    jacoco {
        toolVersion = '0.8.4'
    }

    jacocoTestReport {
        reports {
            xml.enabled = true
            html.destination file("${buildDir}/reports/tests/test")
        }
    }

    sonarqube {
        properties {
            property 'sonar.sources', 'src'
            property 'sonar.exclusions', '**/*{!.java},**/build/**,**/test/**'
            property 'sonar.jacoco.xmlReportsPath', 'build/reports/jacoco/jacocoTestReport.xml'
        }
    }

    checkstyle {
        toolVersion = '8.24'
        sourceSets = [project.sourceSets.main]
    }

    tasks.withType(Checkstyle) {
        reports {
            xml.enabled false
            html.enabled true
        }
    }
}

wrapper {
    gradleVersion = '5.6.2'
    distributionType = Wrapper.DistributionType.ALL
}